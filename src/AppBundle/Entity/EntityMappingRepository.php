<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EntityMappingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntityMappingRepository extends EntityRepository
{
    /**
     * Get Mapping
     *
     * @param $entityType
     * @param $sourceShopId
     * @param $destinationShopId
     * @return array
     */
    public function getMapping($entityType, $sourceShopId, $destinationShopId)
    {
        $result = [];
        $items = $this->findBy([
            'entityType'=>$entityType,
            'sourceShopId'=>$sourceShopId,
            'destinationShopId'=>$destinationShopId
        ]);
        if ($items){
            /** @var EntityMapping $item */
            foreach ($items as $item){
                $result[$item->getSourceEntityId()] = $item->getDestinationEntityId();
            }
        }
        //little hack
        //reverse direction mapping
        $items = $this->findBy([
            'entityType'=>$entityType,
            'sourceShopId'=>$destinationShopId,
            'destinationShopId'=>$sourceShopId
        ]);
        if ($items){
            /** @var EntityMapping $item */
            foreach ($items as $item){
                $result[$item->getDestinationEntityId()] = $item->getSourceEntityId();
            }
        }

        return $result;
    }

    /**
     * Update Mapping
     *
     * @param $entityType
     * @param $sourceShopId
     * @param $destinationShopId
     * @param $mapping
     */
    public function updateMapping($entityType, $sourceShopId, $destinationShopId, $mapping)
    {
        $currentMappings = $this->getMapping($entityType, $sourceShopId, $destinationShopId);
        $newMapping = array_diff($mapping,$currentMappings);

        if (!empty($newMapping)){
            foreach ($newMapping as $sourceEntityId => $destinationEntityId){
                $entityMapping = new EntityMapping();
                $entityMapping->setEntityType($entityType);
                $entityMapping->setSrouceShopId($sourceShopId);
                $entityMapping->setDestinationShopId($destinationShopId);
                $entityMapping->setSourceEntityId($sourceEntityId);
                $entityMapping->setDestinationEntityId($destinationEntityId);
                $this->_em->persist($entityMapping);
            }
            $this->_em->flush();
        }
    }
}
